cmake_minimum_required(VERSION 3.5)
project(p4-tests VERSION 0.1 LANGUAGES C CXX)

option(STANDALONE "Build outside of pkgsrc" OFF)

if (STANDALONE)
  set(PYTHON_EXECUTABLE python3)
  set(CMAKE_BUILD_TYPE "RelWithDebInfo")
  set(CMAKE_POSITION_INDEPENDENT_CODE ON)
  set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${CMAKE_INSTALL_PREFIX}/lib")
  set(THRIFT-DRIVER ON)
  option(CPUVETH       "Use CPU eth port, applicable for model" ON)
  option(GRPC          "Drivers: Build with support for GRPC/protobuf" ON)
  option(BFRT          "Drivers: Build with BFRuntime support" ON)
  option(BFRT-GENERIC-FLAGS "Drivers: Build BF-RT C API with generic flags support" ON)

  if (NOT TOFINO 
    AND NOT TOFINO2
    AND NOT TOFINO2M
    AND NOT TOFINO3 
    )
    set(TOFINO ON CACHE BOOL "Enable Tofino as default" FORCE)
    message(STATUS "\nTarget option missing. Using TOFINO\n")
  endif()

  # p4flags will be appended to internal compiler options
  if(NOT P4FLAGS)
    set(P4FLAGS "" CACHE STRING "" FORCE)
  else()
    message(STATUS "\nP4FLAGS: ${P4FLAGS}")
  endif()

  # p4ppflags will be appended to internal compiler options
  if(NOT P4PPFLAGS)
    set(P4PPFLAGS "" CACHE STRING "" FORCE)
  else()
    message(STATUS "\nP4PPFLAGS: ${P4PPFLAGS}")
  endif()

  find_library(DRIVER driver)
  find_package(Thrift REQUIRED)

  # dummy targets to satisfy dependencies
  add_custom_target(bf-p4c)
  add_custom_target(driver)

  find_program(P4C bf-p4c)
  message("P4C: " ${P4C})
  find_program(P4C-GEN-BFRT-CONF p4c-gen-bfrt-conf)
  message("P4C-GEN_BRFT-CONF: " ${P4C-GEN-BFRT-CONF})
  find_program(P4C-MANIFEST-CONFIG p4c-manifest-config)
  message("P4C-MANIFEST-CONFIG: " ${P4C-MANIFEST-CONFIG})
  find_program(PDGEN generate_tofino_pd)
  message("PDGEN: " ${PDGEN})
  find_program(PDGENCLI gencli)
  message("PDGENCLI: " ${PDGENCLI})
  find_program(PDSPLIT split_pd_thrift.py)
  message("PDSPLIT: " ${PDSPLIT})
endif()

include(P4Build)
option (PSA     "Build for PSA architecture" OFF)

if(THRIFT-DRIVER)
  include_directories(SYSTEM ${THRIFT_INCLUDE_DIR})
endif()

if (TOFINO)
  add_definitions(-DTOFINO)
  set(P4_tofino_ARCHITECTURE "tna")
endif()
if (TOFINO2)
  add_definitions(-DTOFINO2)
  set(P4_tofino2_ARCHITECTURE "t2na")
endif()
if (TOFINO2M)
  add_definitions(-DTOFINO2)
  add_definitions(-DTOFINO2M)
  set(P4_tofino2_ARCHITECTURE "t2na")
endif()
if (TOFINO3)
  add_definitions(-DTOFINO3)
  set(P4_tofino3_ARCHITECTURE "t2na")
endif()

if (PSA)
  set(P4_tofino_ARCHITECTURE "psa")
  set(P4_tofino2_ARCHITECTURE "psa")
  set(P4_tofino3_ARCHITECTURE "psa")
endif()

###############################################################################
# Programs are listed using cmake arrays. A program like tna_exact_match which
# compiles on all architectures can go in the list. Special ones like
# t2na_counter_true_egress_accounting which is specific to tofino2 can't go
# here. Add an explicit target for these kind of programs and then add to the
# larger target for group compilation.
###############################################################################

###############################################################################
# Target hierarchy generated by CMake for p4-16:
#
# tna_digest when configured for both tofino and tofino2 as example
#   -- tofino.bin and context.json  <- make tna_digest-tofino
#   -- tofino2.bin and context.json <- make tna_digest-tofino2
# Finally, "make tna_digest" builds all of the above for tna_digest
#
# Similar build targets are created for each program
###############################################################################

set (P4_16_PROGRAMS
  bri_handle
  bri_with_pdfixed_thrift
  bri_grpc_error
  selector_resize
  tna_32q_2pipe
  tna_action_profile
  tna_action_selector
  tna_alpm
  tna_bridged_md
  tna_checksum
  tna_counter
  tna_custom_hash
  tna_digest
  tna_dkm
  tna_dyn_hashing
  tna_exact_match
  tna_field_slice
  tna_idletimeout
  tna_lpm_match
  tna_meter_bytecount_adjust
  tna_meter_lpf_wred
  tna_mirror
  tna_multicast
  tna_operations
  tna_pktgen
  tna_port_metadata
  tna_port_metadata_extern
  tna_ports
  tna_proxy_hash
  tna_pvs
  tna_random
  tna_range_match
  tna_register
  tna_resubmit
  tna_snapshot
  tna_symmetric_hash
  tna_ternary_match
  tna_timestamp
)
foreach(t IN LISTS P4_16_PROGRAMS)
  set(P4_LANG "p4-16")
  p4_build(${t} "p4_16_programs")
endforeach()

# t2na_counter_true_egress_accounting, only tofino2
if (TOFINO2)
  set (t t2na_counter_true_egress_accounting)
  p4_build_target(${t} ${P4_tofino2_ARCHITECTURE} "tofino2" ${CMAKE_CURRENT_SOURCE_DIR}/p4_16_programs/${t}/${t}.p4)
endif()
if (TOFINO2M)
  set (t t2na_counter_true_egress_accounting)
  p4_build_target(${t} ${P4_tofino2_ARCHITECTURE} "tofino2m" ${CMAKE_CURRENT_SOURCE_DIR}/p4_16_programs/${t}/${t}.p4)
endif()
if (TOFINO3)
  set (t t2na_counter_true_egress_accounting)
  p4_build_target(${t} ${P4_tofino3_ARCHITECTURE} "tofino3" ${CMAKE_CURRENT_SOURCE_DIR}/p4_16_programs/${t}/${t}.p4)
endif()
add_custom_target(${t} DEPENDS $<$<BOOL:${TOFINO2}>:${t}-tofino2>
                               $<$<BOOL:${TOFINO2M}>:${t}-tofino2m>
                               $<$<BOOL:${TOFINO3}>:${t}-tofino3>)

# more complex programs which need special handling
# tna_32q_multiprogram
add_subdirectory(p4_16_programs/tna_32q_multiprogram)

# we have all programs, make a group target
# "make p4-16-programs" should build all programs for all architectures
add_custom_target(p4-16-programs DEPENDS
  ${P4_16_PROGRAMS}
  tna_32q_multiprogram
  $<$<BOOL:${TOFINO2}>:t2na_counter_true_egress_accounting>
  $<$<BOOL:${TOFINO2M}>:t2na_counter_true_egress_accounting>
  $<$<BOOL:${TOFINO3}>:t2na_counter_true_egress_accounting>
)

set (TARGETS_DIR "")

###############################################################################
# Target hierarchy generated by CMake for p4-14:
#
# alpm_test for tofino and tofino2 as example
#   -- tofino.bin and context.json  <- make alpm_test-tofino-gen
#   -- libpd.so                     <- make alpm_test-tofino-pd
#   -- libpdcli.so                  <- make alpm_test-tofino-pdcli
#   -- libpdthrift.so               <- make alpm_test-tofino-pdthrift
# Dummy target for above intermediate targets is "make alpm_test-tofino"

#   -- tofino2.bin and context.json <- make alpm_test-tofino2-gen
#   -- libpd.so                     <- make alpm_test-tofino2-pd
#   -- libpdcli.so                  <- make alpm_test-tofino2-pdcli
#   -- libpdthrift.so               <- make alpm_test-tofino2-pdthrift
# Dummy target for above intermediate targets is "make alpm_test-tofino2"
#
# Finally, "make alpm_test" builds all of the above for alpm_test
#
# Similar build targets are created for each program
###############################################################################

set (P4_14_PROGRAMS
  alpm_test
  basic_switching
  chksum
  default_entry
  deparse_zero
  drivers_test
  fast_reconfig
  ha
  hash_driven
  iterator
  knet_mgr_test
  meters
  mirror_test
  multicast_test
  parser_error
  parser_intr_md
  pcie_pkt_test
  perf_test
  perf_test_alpm
  pgrs
  pvs
  resubmit
  smoke_large_tbls
)
foreach(t IN LISTS P4_14_PROGRAMS)
  set (TOFINO_SINGLE_DEVICE ${t})
  configure_file(${CMAKE_CURRENT_SOURCE_DIR}/${TARGETS_DIR}/tofino/tofino_single_device.conf.in ${CMAKE_INSTALL_PREFIX}/share/p4/targets/tofino/${t}.conf)
  set (TOFINO2_SINGLE_DEVICE ${t})
  set (TOFINO2_VARIANT "tofino2")
  configure_file(${CMAKE_CURRENT_SOURCE_DIR}/${TARGETS_DIR}/tofino2/tofino2_single_device.conf.in ${CMAKE_INSTALL_PREFIX}/share/p4/targets/tofino2/${t}.conf)
  set (TOFINO2_VARIANT "tofino2m")
  configure_file(${CMAKE_CURRENT_SOURCE_DIR}/${TARGETS_DIR}/tofino2/tofino2_single_device.conf.in ${CMAKE_INSTALL_PREFIX}/share/p4/targets/tofino2m/${t}.conf)
  set (TOFINO3_SINGLE_DEVICE ${t})
  configure_file(${CMAKE_CURRENT_SOURCE_DIR}/${TARGETS_DIR}/tofino3/tofino3_single_device.conf.in ${CMAKE_INSTALL_PREFIX}/share/p4/targets/tofino3/${t}.conf)

  set(PDFLAGS_INTERNAL "")
  if (${t} STREQUAL "ha")
    set(PDFLAGS_INTERNAL "--gen-hitless-ha-test-pd")
  endif()
  if (${t} STREQUAL "iterator")
    set(PDFLAGS_INTERNAL "--gen-md-pd")
  endif()
  if (${t} STREQUAL "perf_test_alpm")
    set(PDFLAGS_INTERNAL "--gen-perf-test-pd")
  endif()
  if (${t} STREQUAL "perf_test")
    set(PDFLAGS_INTERNAL "--gen-perf-test-pd")
  endif()
  if (${t} STREQUAL "drivers_test")
    set(PDFLAGS_INTERNAL "--gen-md-pd" "--gen-hitless-ha-test-pd")
  endif()

  set(P4_LANG "p4-14")
  set(P4_tofino_ARCHITECTURE "v1model")
  set(P4_tofino2_ARCHITECTURE "v1model")
  set(P4_tofino3_ARCHITECTURE "v1model")
  p4_build_pd(${t} "programs")
endforeach()

# stful, only tofino
if (TOFINO)
  set (t stful)
  p4_build_pd_target(${t} "v1model" "tofino" ${CMAKE_CURRENT_SOURCE_DIR}/programs/${t}/${t}.p4)
  add_custom_target(${t} DEPENDS $<$<BOOL:${TOFINO}>:${t}-tofino>)
endif()

# we have all programs, make a group target
# "make p4-14-programs" should build all programs for all architectures
add_custom_target(p4-14-programs DEPENDS
  ${P4_14_PROGRAMS}
  $<$<BOOL:${TOFINO}>:stful>
)

# one target to rule them all
# "make p4-examples" should build all supported programs
add_custom_target(p4-examples DEPENDS p4-14-programs p4-16-programs)

set (P4_14_COMMON_CONF_FILES
  drivers_test.conf
  drivers_test_virtual_dev.conf
  iterator.conf
  multipipe_custom_bfrt.conf
  multiprogram_custom_bfrt.conf
)
foreach(t IN LISTS P4_14_COMMON_CONF_FILES)
  configure_file(${CMAKE_CURRENT_SOURCE_DIR}/${TARGETS_DIR}/tofino/${t}.in ${CMAKE_INSTALL_PREFIX}/share/p4/targets/tofino/${t})
  set (TOFINO2_VARIANT "tofino2")
  configure_file(${CMAKE_CURRENT_SOURCE_DIR}/${TARGETS_DIR}/tofino2/${t}.in ${CMAKE_INSTALL_PREFIX}/share/p4/targets/tofino2/${t})
  set (TOFINO2_VARIANT "tofino2m")
  configure_file(${CMAKE_CURRENT_SOURCE_DIR}/${TARGETS_DIR}/tofino2/${t}.in ${CMAKE_INSTALL_PREFIX}/share/p4/targets/tofino2m/${t})
  configure_file(${CMAKE_CURRENT_SOURCE_DIR}/${TARGETS_DIR}/tofino3/${t}.in ${CMAKE_INSTALL_PREFIX}/share/p4/targets/tofino3/${t})
endforeach()
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/${TARGETS_DIR}/tofino/tofino_skip_p4.conf.in ${CMAKE_INSTALL_PREFIX}/share/p4/targets/tofino/tofino_skip_p4.conf)
set (TOFINO2_VARIANT "tofino2")
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/${TARGETS_DIR}/tofino2/tofino2_skip_p4.conf.in ${CMAKE_INSTALL_PREFIX}/share/p4/targets/tofino2/tofino2_skip_p4.conf)
set (TOFINO2_VARIANT "tofino2m")
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/${TARGETS_DIR}/tofino2/tofino2_skip_p4.conf.in ${CMAKE_INSTALL_PREFIX}/share/p4/targets/tofino2m/tofino2_skip_p4.conf)
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/${TARGETS_DIR}/tofino3/tofino3_skip_p4.conf.in ${CMAKE_INSTALL_PREFIX}/share/p4/targets/tofino3/tofino3_skip_p4.conf)


# Add p4rt targets
set(P4_LANG "p4-16")
set(P4_tofino_ARCHITECTURE "v1model")
p4_build("p4rt_utests" "p4_16_programs" "p4rt")
